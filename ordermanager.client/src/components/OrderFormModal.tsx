import { useEffect, useState } from 'react';
import { Product } from '../models/Product';
import { Employee } from '../models/Employee';
import { OrderApi } from '../api/OrderApi';
import { Order } from '../models/Order';
import { ProductApi } from '../api/ProductApi';
import { EmployeeApi } from '../api/EmployeeApi';
import { useAppStore } from '../store/appStore';

interface Props {
  show: boolean;
  onClose: () => void;
  onSave: () => void;  
  customerId: number;
}

const OrderFormModal = ({ show, onClose, onSave, customerId }: Props) => {
  const [productId, setProductId] = useState<number | null>(null);
  const [salesPersonId, setSalesPersonId] = useState<number | null>(null);
  const [quantity, setQuantity] = useState(1);
  const [products, setProducts] = useState<Product[]>([]);
  const [employees, setEmployees] = useState<Employee[]>([]);  

  const appState = useAppStore();

    useEffect(()=> {
      try
      {
        loadProducts();
        loadEmployees();
      }catch (error) {
        console.error('Failed to fetch products or employees', error);
        alert('Failed to fetch products or employees' + error);
      }finally {
        setProducts([]);
        setEmployees([]);
    }}, []); 
    

    const loadProducts = async () => {
      const data = await ProductApi.getProducts(); //TODO:Add paging      
      setProducts(data);
    };
    
    const loadEmployees = async () => {
      const data = await EmployeeApi.getEmployees();      
      setEmployees(data);
    };



  const handleSubmit = async (e: React.FormEvent) => {    
    try{    
        e.preventDefault();
        if (!productId || !salesPersonId) {
          alert('Please select product and salesperson.');
          return;
        }
        if( quantity <= 0) {
          alert('Please enter a valid quantity.');
          return;
        }
        const newOrder: Order = {
            orderId: 0, // Order ID is auto-generated by the server
            customerId,
            productId,
            salesPersonId,
            quantity,
          };
         
        // Call the API to create the order
        await OrderApi.createOrder(newOrder);
          
        onSave();
        onClose();
    }catch (error) {
      console.error('Failed to create order', error);
      alert('Failed to create order' + error);
    }
  };

  return (
    <div className={`modal fade ${show ? 'show d-block' : 'd-none'}`}>
      <div className="modal-dialog">
        <div className="modal-content">
          <form onSubmit={handleSubmit}>
            <div className="modal-header">
              <h5 className="modal-title">Add Order</h5>
              <button type="button" className="btn-close" onClick={onClose}></button>
            </div>
            <div className="modal-body">            
                
                {/* Sales Person*/}
                <div className="mb-3">
                    <label>Sales Person</label>
                    <select
                        className="form-select"
                        value={salesPersonId ?? ''}
                        onChange={(e) => setSalesPersonId(parseInt(e.target.value))}
                        required>
                        <option value="">-- Select Sales Person --</option>
                        {employees.map(p => (
                        <option key={p.employeeId} value={p.employeeId}>
                            {p.firstName} {p.lastName}
                        </option>
                        ))}
                    </select>
                </div>
                
                
                {/* Product Dropdown */}
                <div className="mb-3">
                    <label>Product</label>
                    <select
                    className="form-select"
                    value={productId ?? ''}
                    onChange={(e) => setProductId(parseInt(e.target.value))}
                    required
                    >
                    <option value="">-- Select Product --</option>
                    {products.map(p => (
                        <option key={p.productId} value={p.productId}>
                        {p.name} (Â£{p.price.toFixed(2)})
                        </option>
                    ))}
                    </select>
                </div>

              


              <div className="mb-3">
                <label>Quantity</label>
                <input type="number" className="form-control" value={quantity} onChange={(e) => setQuantity(parseInt(e.target.value))} />
              </div>
            </div>

            <div className="modal-footer">
              <button type="button" className="btn btn-secondary"  onClick={onClose}>Cancel</button>
              <button type="submit" className="btn btn-primary" disabled={!appState.isApiOnline}   >Save</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default OrderFormModal;
